import Stripe from 'stripe';
import stripe from '../../utils/stripe';

const makePayment = async (amount: number, paymentMethodId: string) => {
  // stripe implementation here

  console.log('hit the makePayment function');

  const payment = await stripe.paymentIntents.create({
    amount: amount * 100, // amount in cents
    currency: 'usd',
    payment_method: 'pm_card_visa',
    confirm: true,
    automatic_payment_methods: { enabled: true },
    return_url: 'https://sana-ullah-roton.web.app/',
  });
  console.log(payment);
  return payment;
};

const WebhookStripe = async (sig: string, body: any) => {
  const endpointSecret = 'we_1RZx91Fzo88Og9LwII7gjwMM'; // 5Ô∏è‚É£ Stripe dashboard ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ webhook secret

  let event: Stripe.Event;

  try {
    // 6Ô∏è‚É£ Signature verify ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∏‡¶≤ event ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
    event = stripe.webhooks.constructEvent(body, sig!, endpointSecret);
  } catch (err: any) {
    console.error('‚ö†Ô∏è Webhook signature invalid:', err);
    throw new Error(`Webhook Error: ${err.message}`);
  }

  // 7Ô∏è‚É£ ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® Event ‡¶ß‡¶∞‡¶¨‡ßã (success, fail etc.)
  switch (event.type) {
    case 'payment_intent.succeeded':
      const paymentIntent = event.data.object as Stripe.PaymentIntent;
      console.log('‚úÖ Payment succeeded:', paymentIntent.id);

      // üü¢ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá database update, email send, order confirm ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
      break;

    case 'payment_intent.payment_failed':
      console.log('‚ùå Payment failed');
      break;

    default:
      console.log(`‚ö†Ô∏è Unhandled event type: ${event.type}`);
  }

  // 8Ô∏è‚É£ Stripe ‡¶ï‡ßá response ‡¶¶‡¶ø‡ßü‡ßá confirm ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
  return { received: true };
};
export const paymentService = {
  makePayment,
  WebhookStripe,
};
